'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.18408
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="schoolSystem")>  _
Partial Public Class ModelDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definições do Método de Extensibilidade"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAluno(instance As Aluno)
    End Sub
  Partial Private Sub UpdateAluno(instance As Aluno)
    End Sub
  Partial Private Sub DeleteAluno(instance As Aluno)
    End Sub
  Partial Private Sub InsertMateria(instance As Materia)
    End Sub
  Partial Private Sub UpdateMateria(instance As Materia)
    End Sub
  Partial Private Sub DeleteMateria(instance As Materia)
    End Sub
  Partial Private Sub InsertCurso(instance As Curso)
    End Sub
  Partial Private Sub UpdateCurso(instance As Curso)
    End Sub
  Partial Private Sub DeleteCurso(instance As Curso)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Model.My.MySettings.Default.schoolSystemConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Aluno() As System.Data.Linq.Table(Of Aluno)
		Get
			Return Me.GetTable(Of Aluno)
		End Get
	End Property
	
	Public ReadOnly Property Materia() As System.Data.Linq.Table(Of Materia)
		Get
			Return Me.GetTable(Of Materia)
		End Get
	End Property
	
	Public ReadOnly Property Curso() As System.Data.Linq.Table(Of Curso)
		Get
			Return Me.GetTable(Of Curso)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Aluno")>  _
Partial Public Class Aluno
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idAluno As Integer
	
	Private _Nome As String
	
	Private _Endereco As String
	
	Private _Cep As String
	
	Private _Telefone As String
	
	Private _Celular As String
	
	Private _dataNascimento As System.Nullable(Of Date)
	
	Private _dataCadastro As System.Nullable(Of Date)
	
	Private _dataAtualizacao As System.Nullable(Of Date)
	
	Private _Curso As EntitySet(Of Curso)
	
    #Region "Definições do Método de Extensibilidade"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidAlunoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidAlunoChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnEnderecoChanging(value As String)
    End Sub
    Partial Private Sub OnEnderecoChanged()
    End Sub
    Partial Private Sub OnCepChanging(value As String)
    End Sub
    Partial Private Sub OnCepChanged()
    End Sub
    Partial Private Sub OnTelefoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelefoneChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    Partial Private Sub OndataNascimentoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataNascimentoChanged()
    End Sub
    Partial Private Sub OndataCadastroChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataCadastroChanged()
    End Sub
    Partial Private Sub OndataAtualizacaoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataAtualizacaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Curso = New EntitySet(Of Curso)(AddressOf Me.attach_Curso, AddressOf Me.detach_Curso)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idAluno", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idAluno() As Integer
		Get
			Return Me._idAluno
		End Get
		Set
			If ((Me._idAluno = value)  _
						= false) Then
				Me.OnidAlunoChanging(value)
				Me.SendPropertyChanging
				Me._idAluno = value
				Me.SendPropertyChanged("idAluno")
				Me.OnidAlunoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="VarChar(255)")>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Endereco", DbType:="VarChar(255)")>  _
	Public Property Endereco() As String
		Get
			Return Me._Endereco
		End Get
		Set
			If (String.Equals(Me._Endereco, value) = false) Then
				Me.OnEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._Endereco = value
				Me.SendPropertyChanged("Endereco")
				Me.OnEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cep", DbType:="VarChar(17)")>  _
	Public Property Cep() As String
		Get
			Return Me._Cep
		End Get
		Set
			If (String.Equals(Me._Cep, value) = false) Then
				Me.OnCepChanging(value)
				Me.SendPropertyChanging
				Me._Cep = value
				Me.SendPropertyChanged("Cep")
				Me.OnCepChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefone", DbType:="VarChar(17)")>  _
	Public Property Telefone() As String
		Get
			Return Me._Telefone
		End Get
		Set
			If (String.Equals(Me._Telefone, value) = false) Then
				Me.OnTelefoneChanging(value)
				Me.SendPropertyChanging
				Me._Telefone = value
				Me.SendPropertyChanged("Telefone")
				Me.OnTelefoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="VarChar(17)")>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataNascimento", DbType:="Date")>  _
	Public Property dataNascimento() As System.Nullable(Of Date)
		Get
			Return Me._dataNascimento
		End Get
		Set
			If (Me._dataNascimento.Equals(value) = false) Then
				Me.OndataNascimentoChanging(value)
				Me.SendPropertyChanging
				Me._dataNascimento = value
				Me.SendPropertyChanged("dataNascimento")
				Me.OndataNascimentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataCadastro", DbType:="DateTime")>  _
	Public Property dataCadastro() As System.Nullable(Of Date)
		Get
			Return Me._dataCadastro
		End Get
		Set
			If (Me._dataCadastro.Equals(value) = false) Then
				Me.OndataCadastroChanging(value)
				Me.SendPropertyChanging
				Me._dataCadastro = value
				Me.SendPropertyChanged("dataCadastro")
				Me.OndataCadastroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataAtualizacao", DbType:="DateTime")>  _
	Public Property dataAtualizacao() As System.Nullable(Of Date)
		Get
			Return Me._dataAtualizacao
		End Get
		Set
			If (Me._dataAtualizacao.Equals(value) = false) Then
				Me.OndataAtualizacaoChanging(value)
				Me.SendPropertyChanging
				Me._dataAtualizacao = value
				Me.SendPropertyChanged("dataAtualizacao")
				Me.OndataAtualizacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Aluno_Curso", Storage:="_Curso", ThisKey:="idAluno", OtherKey:="idAluno")>  _
	Public Property Curso() As EntitySet(Of Curso)
		Get
			Return Me._Curso
		End Get
		Set
			Me._Curso.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Curso(ByVal entity As Curso)
		Me.SendPropertyChanging
		entity.Aluno = Me
	End Sub
	
	Private Sub detach_Curso(ByVal entity As Curso)
		Me.SendPropertyChanging
		entity.Aluno = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Materia")>  _
Partial Public Class Materia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMateria As Integer
	
	Private _Nome As String
	
	Private _Descricao As String
	
	Private _dataCadastro As System.Nullable(Of Date)
	
	Private _dataAtualizacao As System.Nullable(Of Date)
	
	Private _Curso As EntitySet(Of Curso)
	
    #Region "Definições do Método de Extensibilidade"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMateriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMateriaChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OndataCadastroChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataCadastroChanged()
    End Sub
    Partial Private Sub OndataAtualizacaoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataAtualizacaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Curso = New EntitySet(Of Curso)(AddressOf Me.attach_Curso, AddressOf Me.detach_Curso)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMateria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idMateria() As Integer
		Get
			Return Me._idMateria
		End Get
		Set
			If ((Me._idMateria = value)  _
						= false) Then
				Me.OnidMateriaChanging(value)
				Me.SendPropertyChanging
				Me._idMateria = value
				Me.SendPropertyChanged("idMateria")
				Me.OnidMateriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="VarChar(255)")>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="VarChar(255)")>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataCadastro", DbType:="DateTime")>  _
	Public Property dataCadastro() As System.Nullable(Of Date)
		Get
			Return Me._dataCadastro
		End Get
		Set
			If (Me._dataCadastro.Equals(value) = false) Then
				Me.OndataCadastroChanging(value)
				Me.SendPropertyChanging
				Me._dataCadastro = value
				Me.SendPropertyChanged("dataCadastro")
				Me.OndataCadastroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataAtualizacao", DbType:="DateTime")>  _
	Public Property dataAtualizacao() As System.Nullable(Of Date)
		Get
			Return Me._dataAtualizacao
		End Get
		Set
			If (Me._dataAtualizacao.Equals(value) = false) Then
				Me.OndataAtualizacaoChanging(value)
				Me.SendPropertyChanging
				Me._dataAtualizacao = value
				Me.SendPropertyChanged("dataAtualizacao")
				Me.OndataAtualizacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Materia_Curso", Storage:="_Curso", ThisKey:="idMateria", OtherKey:="idMateria")>  _
	Public Property Curso() As EntitySet(Of Curso)
		Get
			Return Me._Curso
		End Get
		Set
			Me._Curso.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Curso(ByVal entity As Curso)
		Me.SendPropertyChanging
		entity.Materia = Me
	End Sub
	
	Private Sub detach_Curso(ByVal entity As Curso)
		Me.SendPropertyChanging
		entity.Materia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Curso")>  _
Partial Public Class Curso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCurso As Integer
	
	Private _idAluno As Integer
	
	Private _idMateria As Integer
	
	Private _Nome As String
	
	Private _Descricao As String
	
	Private _dataCadastro As System.Nullable(Of Date)
	
	Private _dataAtualizacao As System.Nullable(Of Date)
	
	Private _Materia As EntityRef(Of Materia)
	
	Private _Aluno As EntityRef(Of Aluno)
	
    #Region "Definições do Método de Extensibilidade"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCursoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCursoChanged()
    End Sub
    Partial Private Sub OnidAlunoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidAlunoChanged()
    End Sub
    Partial Private Sub OnidMateriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMateriaChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OndataCadastroChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataCadastroChanged()
    End Sub
    Partial Private Sub OndataAtualizacaoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndataAtualizacaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Materia = CType(Nothing, EntityRef(Of Materia))
		Me._Aluno = CType(Nothing, EntityRef(Of Aluno))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCurso", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCurso() As Integer
		Get
			Return Me._idCurso
		End Get
		Set
			If ((Me._idCurso = value)  _
						= false) Then
				Me.OnidCursoChanging(value)
				Me.SendPropertyChanging
				Me._idCurso = value
				Me.SendPropertyChanged("idCurso")
				Me.OnidCursoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idAluno", DbType:="Int NOT NULL")>  _
	Public Property idAluno() As Integer
		Get
			Return Me._idAluno
		End Get
		Set
			If ((Me._idAluno = value)  _
						= false) Then
				If Me._Aluno.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidAlunoChanging(value)
				Me.SendPropertyChanging
				Me._idAluno = value
				Me.SendPropertyChanged("idAluno")
				Me.OnidAlunoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMateria", DbType:="Int NOT NULL")>  _
	Public Property idMateria() As Integer
		Get
			Return Me._idMateria
		End Get
		Set
			If ((Me._idMateria = value)  _
						= false) Then
				If Me._Materia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidMateriaChanging(value)
				Me.SendPropertyChanging
				Me._idMateria = value
				Me.SendPropertyChanged("idMateria")
				Me.OnidMateriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="VarChar(255)")>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="VarChar(255)")>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataCadastro", DbType:="DateTime")>  _
	Public Property dataCadastro() As System.Nullable(Of Date)
		Get
			Return Me._dataCadastro
		End Get
		Set
			If (Me._dataCadastro.Equals(value) = false) Then
				Me.OndataCadastroChanging(value)
				Me.SendPropertyChanging
				Me._dataCadastro = value
				Me.SendPropertyChanged("dataCadastro")
				Me.OndataCadastroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dataAtualizacao", DbType:="DateTime")>  _
	Public Property dataAtualizacao() As System.Nullable(Of Date)
		Get
			Return Me._dataAtualizacao
		End Get
		Set
			If (Me._dataAtualizacao.Equals(value) = false) Then
				Me.OndataAtualizacaoChanging(value)
				Me.SendPropertyChanging
				Me._dataAtualizacao = value
				Me.SendPropertyChanged("dataAtualizacao")
				Me.OndataAtualizacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Materia_Curso", Storage:="_Materia", ThisKey:="idMateria", OtherKey:="idMateria", IsForeignKey:=true)>  _
	Public Property Materia() As Materia
		Get
			Return Me._Materia.Entity
		End Get
		Set
			Dim previousValue As Materia = Me._Materia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Materia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Materia.Entity = Nothing
					previousValue.Curso.Remove(Me)
				End If
				Me._Materia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Curso.Add(Me)
					Me._idMateria = value.idMateria
				Else
					Me._idMateria = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Materia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Aluno_Curso", Storage:="_Aluno", ThisKey:="idAluno", OtherKey:="idAluno", IsForeignKey:=true)>  _
	Public Property Aluno() As Aluno
		Get
			Return Me._Aluno.Entity
		End Get
		Set
			Dim previousValue As Aluno = Me._Aluno.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Aluno.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Aluno.Entity = Nothing
					previousValue.Curso.Remove(Me)
				End If
				Me._Aluno.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Curso.Add(Me)
					Me._idAluno = value.idAluno
				Else
					Me._idAluno = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Aluno")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
